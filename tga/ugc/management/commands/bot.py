from django.core.management.base import BaseCommand
import logging

from datetime import datetime
from telegram.utils.request import Request
from telegram import (
	ReplyKeyboardMarkup, 
	ReplyKeyboardRemove, 
	InlineKeyboardButton, 
	KeyboardButton, 
	InlineKeyboardMarkup, 
	Update,
	Bot,
)
from telegram.ext import (
	Updater,
	CommandHandler,
	MessageHandler,
	Filters,
	ConversationHandler,
	CallbackContext,
	CallbackQueryHandler,
)

from django.conf import settings

from ugc.models import Profile
from ugc.models import Departments
from ugc.models import NeedTypes
from ugc.models import Requests

from ugc.buttons import BUTTON_JOIN
from ugc.buttons import BUTTON_HELP
from ugc.buttons import BUTTON_REQ
from ugc.buttons import BUTTON_REREQ
from ugc.buttons import BUTTON_SEND
from ugc.buttons import BUTTON_BACK
from ugc.buttons import BUTTON_CLOSE

from ugc.buttons import CARTON
from ugc.buttons import PAPER
from ugc.buttons import SETT

from ugc.buttons import FOOD
from ugc.buttons import COMMON
from ugc.buttons import TOOLS
from ugc.buttons import ADVANCE
from ugc.buttons import FORWAY

from ugc.buttons import get_base_reply_keyboard
from ugc.buttons import get_base_admin_keyboard
from ugc.buttons import get_req_reply_keyboard
from ugc.buttons import get_back_close_keyboard
from ugc.buttons import get_send_redo_keyboard

# –í–∫–ª—é—á–∏–º –≤–µ–¥–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞
logging.basicConfig(
	format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —ç—Ç–∞–ø–æ–≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
PRE_JOIN, JOIN, DEP, AMOUNT, NEEDTYPE, NEED, CONFIRM, ADMIN_LOG = range(8)
dep_v = amount_v = needType_v = need_v = ''
CONFIRM_V = False

new_reply_keyboard = [[KeyboardButton(BUTTON_REREQ)]]
new_markup = ReplyKeyboardMarkup(new_reply_keyboard, one_time_keyboard=False, resize_keyboard=True) 

# —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä
def start(update, _):
	user = update.message.from_user
	chat_id = update.message.chat_id
	message_id = update.message.message_id
	print(message_id)
	try:
		admin = Profile.objects.get(name=user.username, status=Profile.ADMIN)
		if(admin):
			update.message.reply_text(
				text='–ü—Ä–∏–≤–µ—Ç! '+user.username+' –ü–æ–∑–¥—Ä–∞–≤–ª—è—é ü§ù\n'
				'–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —Ç–µ–ø–µ—Ä—å –≤–∞—à–∞ üòÖ\n',
				reply_markup=get_base_admin_keyboard()
			)
			return ADMIN_LOG
		else:
			update.message.reply_text(
				text='‚ö†Ô∏è - E—Å–ª–∏ –≤—ã –Ω–µ –Ω–∞—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫\n'
				'–í—ã –±—É–¥–µ—Ç–µ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã\n'
				'–∏–ª–∏ –º–æ–∂–µ—Ç–µ –±—ã—Ç—å –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã\n'
				'–°–æ —Å—Ç–æ—Ä–æ–Ω—ã –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n'
				'–ß—Ç–æ–±—ã –ù–∞—á–∞—Ç—å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "'+BUTTON_JOIN+'"\n',
				reply_markup=get_base_reply_keyboard()
			)
			return PRE_JOIN
	except  Profile.DoesNotExist:
		print('user not fount')
		# todo

	update.message.reply_text(
		text='‚ö†Ô∏è - E—Å–ª–∏ –≤—ã –Ω–µ –Ω–∞—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫\n'
		'–í—ã –±—É–¥–µ—Ç–µ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã\n'
		'–∏–ª–∏ –º–æ–∂–µ—Ç–µ –±—ã—Ç—å –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã\n'
		'–°–æ —Å—Ç–æ—Ä–æ–Ω—ã –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n'
		'–ß—Ç–æ–±—ã –ù–∞—á–∞—Ç—å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "'+BUTTON_JOIN+'"\n',
		reply_markup=get_base_reply_keyboard()
	)
	return PRE_JOIN

def pre_join(update, _):
	update.message.reply_text(
		text='–í—Ö–æ–¥ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω ‚úÖ \n\n'
		'–ú–æ–∂–µ—Ç–µ –ù–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "'+BUTTON_REQ+'"\n',
		reply_markup=get_req_reply_keyboard()	
	)

	print(logger)
	return JOIN

def join(update, _):
	user = update.message.from_user
	
	dep_reply_keyboard = [[SETT], [CARTON, PAPER]]
	dep_markup = ReplyKeyboardMarkup(dep_reply_keyboard, one_time_keyboard=False, resize_keyboard=True)
	update.message.reply_text(
		text='–í—ã–±–µ—Ä–∏—Ç–µ –û—Ç–¥–µ–ª \n\n'
		'–î–ª—è –∫–∞–∫–æ–≥–æ –û—Ç–¥–µ–ª–∞ –ø–ª–∞—Ç–∞?',
		reply_markup=dep_markup	
	)

	# –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç—Ç–∞–ø—É `DEP`
	return DEP

def department(update, _):
	user = update.message.from_user
	global dep_v
	dep_v = update.message.text

	cat_reply_keyboard = [[FOOD, COMMON], [TOOLS], [ADVANCE, FORWAY]]
	cat_markup = ReplyKeyboardMarkup(cat_reply_keyboard, one_time_keyboard=False, resize_keyboard=True)
	update.message.reply_text(
		text='–í—ã–±–µ—Ä–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω—É–∂–¥—ã\n\n'
		'–ï—Å–ª–∏ –≤—ã –æ—Å–ª–æ–∂–Ω—è–µ—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å —Ç–æ–≥–¥–∞\n'
		'–ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç - ' + COMMON,
		reply_markup=cat_markup	
	)
	return NEEDTYPE

def needType(update, _):
	user = update.message.from_user
	global needType_v
	needType_v = update.message.text

	update.message.reply_text(
		text='–û–ø–∏—à–∏—Ç–µ –∑–∞ —á—Ç–æ –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å\n\n'
		'–ü—Ä–∏–º–µ—Ä:\n'
		'–û–±–µ–¥ –Ω–∞ —Ç—Ä–æ–∏—Ö, 3—Ç–∞ –õ–∞–≤–∞—à \n'
		'3—Ç–∞ –ë–∏–≥–ú–∞–∫, 9—Ç–∞ –®–∞—à–ª–∏ \n'
		'6—Ç–∞ 2—Ö–∏–ª —Å–∞–ª–∞—Ç, 2—Ç–∞ 1.5 –∫–æ–ª–∞, 1—Ç–∞ —Å–æ–∫ \n',
		reply_markup=ReplyKeyboardRemove()	
	)
	return NEED

def need(update, _):
	user = update.message.from_user
	global need_v
	need_v= update.message.text

	update.message.reply_text(
		text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ –û–±—à—É—é —Å—É–º–º—É\n\n'
		'‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–±–µ–ª—ã \n'
		'–∏–ª–∏ –∑–Ω–∞–∫–∏ —Ç–∏–ø–∞: `.` `,`\n'
		'–ü—Ä–∏–º–µ—Ä—ã:\n'
		'5 000 000 –∏–ª–∏\n'
		'5,000,000\n'
		'5.000.000\n',
	)
	return AMOUNT

def amount(update, _):
	user = update.message.from_user
	global amount_v
	amount_v= update.message.text
	update.message.reply_text(
		text='–í—Å–µ –ª–∏ –≤–µ—Ä–Ω–æ? \n\n'+
		'–û—Ç–¥–µ–ª: - '+dep_v+'\n'+
		'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: - '+needType_v+'\n'+
		'–û–ø–∏—Å–∞–Ω–∏–µ: - '+need_v+'\n'+
		'–°—É–º–º–∞: '+amount_v+' so\'m\n'
		'–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É'+BUTTON_SEND+'\n',
		reply_markup=get_send_redo_keyboard()
	)
	return CONFIRM

def req_update(update: Update, self) -> None:
	time = datetime.now().strftime("%Y-%m-%d %H:%M")
	"""Parses the CallbackQuery and updates the message text."""
	query = update.callback_query
	user = update.callback_query.from_user
	mID = query.message.message_id
	query.answer()

	r = Requests.objects.get(message_id=mID)
	
	if(int(query.data) == 1):
		status_icon = "‚úÖ"
		r.status = Requests.ACCEPTED
		r.save()
	elif(int(query.data) == 2):
		status_icon = "‚ùå"
		r.status = Requests.REJECTED
		r.save()

	query.edit_message_text(
		text='–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: @'+str(r.profile.name)+'\n'
		'–û—Ç–¥–µ–ª: '+str(r.department)+'\n–°—É–º–º–∞: '+r.amount+'\n'
		'–°—Ç–∞—Ç—É—Å: '+status_icon+' '+r.status+'\n'
		'–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –ó–∞—Ä–æ—Å–∞: @'+user.username+'\n'
		'–í—Ä–µ–º—è: '+time
	)
	reply_to = r.profile.external_id

	bot = Bot (
		token=settings.TOKEN,
		#base_url=settings.PROXY_URL,
	)
	m = bot.send_message(
		reply_to,
		text='–ó–∞–ø—Ä–æ—Å ID: #'+str(r.reply_to_message_id)+'\n'
		'–°—Ç–∞—Ç—É—Å: '+status_icon+' '+r.status+'\n'
		'–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –ó–∞—Ä–æ—Å–∞: @'+user.username+'\n',
		reply_to_message_id = r.reply_to_message_id
	)

def req_send(update: Update, m_id):
	user = update.message.from_user
	global amount_v
	bot = Bot (
		token=settings.TOKEN,
		#base_url=settings.PROXY_URL,
	)
	keyboard = [
		[
			InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='1'),
			InlineKeyboardButton("‚ùå –û—Ç–≤–µ—Ä–≥–Ω—É—Ç—å", callback_data='2'),
		],
	]

	reply_markup = InlineKeyboardMarkup(keyboard)

	m = bot.send_message(
		settings.REQ_SENT_TOKEN,
		text='–ó–æ–ø—Ä–æ—Å ! \n\n'+
		'–û—Ç–ø—Ä–æ–≤–∏—Ç–µ–ª—å: üë§ @'+user.username+'\n'+
		'–û—Ç–¥–µ–ª: - '+dep_v+'\n'+
		'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: - '+needType_v+'\n'+
		'–û–ø–∏—Å–∞–Ω–∏–µ: - '+need_v+'\n'+
		'–°—É–º–º–∞: '+amount_v+' so\'m\n',
		reply_markup = reply_markup
	)

	r = Requests.objects.get(message_id=m_id)
	r.message_id = m.message_id
	r.save()

def confirm(update: Update, _):
	user = update.message.from_user
	chat_id = update.message.chat_id
	message_id = update.message.message_id
	
	dep = Departments.objects.get(title=dep_v)
	needT = NeedTypes.objects.get(title=needType_v)
	p, _= Profile.objects.get_or_create(
		external_id = chat_id,
		defaults ={
			'name': user.username,
			'department': Departments.objects.get(id = dep.id),
		}

	)
	r = Requests(
		profile=p,
		department=Departments.objects.get(id = dep.id),
		need_type=NeedTypes.objects.get(id = needT.id),
		need=need_v,
		amount=amount_v,
		message_id = message_id,
		reply_to = message_id,
	)
	r.save()
	
	update.message.reply_text(
		text='–û—Ç–ø—Ä–≤–ª–µ–Ω–æ ! \n'
		'–û—Ç –∏–º–µ–Ω–∏: üë§ '+user.username+'\n'
		'ID: #'+str(message_id)+' \n',
		reply_markup=new_markup
	)
	req_send(update,message_id)
	return ConversationHandler.END

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /cancel –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª —Ä–∞–∑–≥–æ–≤–æ—Ä
def stop(update, _):
	# –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user = update.message.from_user
	# –ü–∏—à–µ–º –≤ –∂—É—Ä–Ω–∞–ª –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—á–∏–≤—ã–π
	logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ—Ç–º–µ–Ω–∏–ª —Ä–∞–∑–≥–æ–≤–æ—Ä.", user.first_name)
	# –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –æ—Ç–∫–∞–∑ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å
	update.message.reply_text(
		text='–ó–∞–ø—Ä–æ—Å –û—Ç–º–µ–Ω–µ–Ω',
		reply_markup=new_markup
	)
	# –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä.
	return ConversationHandler.END

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ `ConversationHandler` 
# —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ GENDER, PHOTO, LOCATION –∏ BIO
conv_handler = ConversationHandler( # –∑–¥–µ—Å—å —Å—Ç—Ä–æ–∏—Ç—Å—è –ª–æ–≥–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
	# —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä
	entry_points=[CommandHandler('start', start), MessageHandler(Filters.text(BUTTON_REREQ), pre_join)],
	# —ç—Ç–∞–ø—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞, –∫–∞–∂–¥—ã–π —Å–æ —Å–≤–æ–∏–º —Å–ø–∏—Å–∫–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
	states={
		PRE_JOIN: [MessageHandler(Filters.text(BUTTON_JOIN), pre_join)],
		JOIN: [MessageHandler(Filters.text(BUTTON_REQ), join)],
		DEP: [MessageHandler(Filters.regex('^('+ CARTON +'|'+ PAPER +'|'+ SETT +')$'), department)],
		NEEDTYPE: [MessageHandler(Filters.regex('^('+FOOD+'|'+COMMON+'|'+TOOLS+'|'+ADVANCE+'|'+FORWAY+')$'), needType)],
		NEED: [MessageHandler(Filters.text, need)],
		AMOUNT: [MessageHandler(Filters.regex('\d[\,\.\ ]{1}\d{1,2}'), amount)],
		CONFIRM: [MessageHandler(Filters.text(BUTTON_SEND), confirm), MessageHandler(Filters.text(BUTTON_CLOSE), stop)],
	},
	# —Ç–æ—á–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
	fallbacks=[CommandHandler('stop', stop)],
)

class Command(BaseCommand):
	help = 'telegram bot'

	def handle(self, *args, **options):
		# -- the connection
		request = Request (
			# connect_timeout=2.5,
			# read_timeout=1.0,
		)
		bot = Bot (
			request=request,
			token=settings.TOKEN,
			#base_url=settings.PROXY_URL,
		)	
		print(bot.get_me())

		# -- process hendlers
		updater = Updater(
			bot=bot,
			use_context=True,
		)

		updater.dispatcher.add_handler(conv_handler)
		updater.dispatcher.add_handler(CallbackQueryHandler(req_update))

		updater.start_polling()
		updater.idle()